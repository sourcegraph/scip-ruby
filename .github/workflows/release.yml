name: Release
on:
  push:
    tags:
      - 'scip-ruby-v*'

jobs:
  create-release:
    name: 'Create release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create Release Step
        id: create_release
        run: |
          TAG="${GITHUB_REF/refs\/tags\//}"
          TITLE="$(echo "$TAG" | sed 's/-v/ v/')"
          cat .github/workflows/release-template.md \
            | sed -e "s/TAG_PLACEHOLDER/$TAG/" \
            > notes
          gh release create "$TAG" --title "$TITLE" --notes-file notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload-artifacts:
    name: 'Build and upload artifacts'
    needs: create-release
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    env:
      TAG: ${{ github.event.ref }}
    steps:
      - uses: actions/checkout@v3
      - name: "🚀 Mount Bazel build cache"
        if: ${{ runner.os }} == 'Linux'
        uses: actions/cache@v3
        with:
          path: ~/bazelcache/build
          key: bazel-build-${{ runner.os }}
          restore-keys: |
            bazel-build-
      - name: "🚀 Mount Bazel repo cache"
        uses: actions/cache@v3
        if: ${{ runner.os }} == 'Linux'
        with:
          path: ~/bazelcache/repos
          key: bazel-repos-${{ runner.os }}
          restore-keys: |
            bazel-repos-
      - name: "⚙️  Setup Bazel"
        run: .github/workflows/setup-bazel.sh
      - name: "🔎 Identify OS"
        run: |
          case "$(uname -s)" in
            Linux*)     os="linux";;
            Darwin*)    os="darwin";;
            *)          echo "Unhandled OS type" && exit 1;;
          esac
          echo "OS=$os" >> "$GITHUB_ENV"
      - name: "🏗 Build (debug)"
        run: ./bazel build //main:scip-ruby --config=dbg --execution_log_binary_file=log
      - name: "🪵 Upload log"
        uses: actions/upload-artifact@v3
        with:
          name: debug-build-log
          path: log
      - name: "📦 Upload debug binary"
        run: |
          rm log
          ls bazel-out
          debugBinaryPath="scip-ruby-debug-$OS-$(uname -m)"
          builtBinaryPath="$(find bazel-out/ -type f -name 'scip-ruby')"
          mv "$builtBinaryPath" "$debugBinaryPath"
          gh release upload "${GITHUB_REF/refs\/tags\//}" "$debugBinaryPath"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OS: ${{ env.OS }}
      - name: "🏗 Build (release)"
        run: ./bazel build //main:scip-ruby --config=release-$OS --execution_log_binary_file=log
        env:
          OS: ${{ env.OS }}
      - name: "🪵 Upload log"
        uses: actions/upload-artifact@v3
        with:
          name: release-build-log
          path: log
      - name: "📦 Upload release binary"
        run: |
          rm log
          ls bazel-out
          releaseBinaryPath="scip-ruby-$OS-$(uname -m)"
          builtBinaryPath="$(find bazel-out/ -type f -name 'scip-ruby')"
          mv "$builtBinaryPath" "$releaseBinaryPath"
          gh release upload "${GITHUB_REF/refs\/tags\//}" "$releaseBinaryPath"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OS: ${{ env.OS }}
