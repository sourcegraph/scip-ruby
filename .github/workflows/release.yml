name: Release
on:
  push:
    tags:
      - 'scip-ruby-v*'

jobs:
  create-release:
    name: 'Create release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create Release Step
        id: create_release
        run: |
          TAG="${GITHUB_REF/refs\/tags\//}"
          TITLE="$(echo "$TAG" | sed 's/-v/ v/')"
          cat .github/workflows/release-template.md \
            | sed -e "s/TAG_PLACEHOLDER/$TAG/" \
            > notes
          gh release create "$TAG" --title "$TITLE" --notes-file notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload-artifacts:
    name: 'Build and upload artifacts'
    needs: create-release
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
        config: ['debug', 'release']
    runs-on: ${{ matrix.platform }}
    env:
      TAG: ${{ github.event.ref }}
    steps:
      - uses: actions/checkout@v3
      # Keep in sync with ci.yml
      - name: Manually evict cache entry if applicable
        if: ${{ runner.os == 'Linux' }}
        run: ACCESS_TOKEN='${{ secrets.GITHUB_TOKEN }}' python3 .github/workflows/evict.py
      - name: "üöÄ Mount Bazel build cache"
        if: ${{ runner.os == 'Linux' }}
        uses: actions/cache@v3
        with:
          path: ~/bazelcache/build
          key: bazel-build-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            bazel-build-${{ runner.os }}-
            bazel-build-
      - name: "üöÄ Mount Bazel repo cache"
        uses: actions/cache@v3
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/bazelcache/repos
          key: bazel-repos-${{ runner.os }}-${{ hashFiles('WORKSPACE') }}
          restore-keys: |
            bazel-repos-${{ runner.os }}-
            bazel-repos-
      - name: "‚öôÔ∏è Setup Bazel"
        run: .github/workflows/setup-bazel.sh
      - name: "üîé Identify OS"
        run: echo "OS=$(uname -s | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
      - name: ${{ format('üèó Build ({0})', matrix.config) }}
        run: |
          CONFIG="dbg"
          if [ "$CFG" == "release" ]; then
            CONFIG="release-${OS/darwin/mac}"
          fi
          ./bazel build //main:scip-ruby --config="$CONFIG" --execution_log_binary_file=log
        env:
          OS: ${{ env.OS }}
          CFG: ${{ matrix.config }}
      - name: "ü™µ Upload log"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.config }}-build-log
          path: log
      - name: ${{ format('üì¶ Upload binary ({0})', matrix.config) }}
        run: |
          ls bazel-out
          BASE_NAME="scip-ruby-debug"
          if [ "$CFG" == "release" ]; then
            BASE_NAME="scip-ruby"
          fi
          outBinaryPath="$BASE_NAME-$OS-$(uname -m)"
          builtBinaryPath="$(find bazel-out/ -type f -name 'scip-ruby')"
          mv "$builtBinaryPath" "$outBinaryPath"
          gh release upload "${GITHUB_REF/refs\/tags\//}" "$outBinaryPath"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OS: ${{ env.OS }}
          CFG: ${{ matrix.config }}
